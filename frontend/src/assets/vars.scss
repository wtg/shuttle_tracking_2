@import "~bulma/sass/utilities/all";
@import "~buefy/src/scss/utils/functions";

/* Master colors definition. */
$primary: #ed1c24;
$link: #ff0000;
$black: #181818;
$white: #ffffff;
$twitter: #4099ff;
$twitter-invert: findColorInvert($twitter);

/*
 * The defineColor* family of functions define a CSS variable `${name}` to be the given color.
 *   Example: @include defineColorRGB(--color-primary, 0, 255, 0);
 *            a { color: var(--color-primary); }
 * Also defines a var `${name}-rgb` to have only the raw values, for use with functions like rgba().
 *   Example: a { color: rgba(var(--color-primary-rgb), 0.5); }
 *
 * https://codyhouse.co/blog/post/how-to-combine-sass-color-functions-and-css-variables
 */
@mixin defineColor($name, $css-color) {
  #{$name}: #{$css-color};
  #{$name}-rgb: unquote("#{red($css-color)}, #{green($css-color)}, #{blue($css-color)}");
}
@mixin defineColorRGB($name, $red, $green, $blue) {
  #{$name}: unquote("rgb(#{$red}, #{$green}, #{$blue})");
  #{$name}-rgb: unquote("#{$red}, #{$green}, #{$blue}");
}
/**
 * This function overrides the SASS rgba() function to support CSS variables. If a variable is the argument of rgba(),
 * the built-in CSS rgba() function is used instead.
 *
 * BUG! This function will NOT work if the argument is any more complex than a single var(--xxx). Caveat emptor.
 */
@function rgba($args...) {
  // I could not figure out how to call the original rgba function. So.... enjoy this HACK BULLSHIT :(.
  $color: null;
  $alpha: null;
  @if length($args) == 4 {
    $color: rgb(nth($args, 1), nth($args, 2), nth($args, 3));
    $alpha: nth($args, 4);
  } @else {
    $color: nth($args, 1);
    $alpha: nth($args, 2);
  }

  @if type_of($color) == "string" and str-index($color, "var(") == 1 {
    $color: str-replace($color, "var(", "");
    $color: str-replace($color, ")");
    $color: str-replace($color, "-rgb");
    @return unquote("rgba(var(#{$color}-rgb), #{$alpha})");
  } @else {
    @return hsla(hue($color), saturation($color), lightness($color), $alpha);
  }
}

/** This is the (default) light theme for the app. These variables are native CSS vars. They are evaluated at runtime. */
body {
  @include defineColor(--color-fg-strong, $black);
  @include defineColor(--color-fg-normal, lighten($black, 15%));
  @include defineColor(--color-fg-light, lighten($black, 30%));
  @include defineColor(--color-bg-normal, $white);
  @include defineColor(--color-bg-less, darken($white, 12%));
  @include defineColor(--color-bg-least, darken($white, 25%));
  @include defineColor(--color-primary, $primary);
}

/** This is the dark theme for the app. */
[data-theme="dark"] {
  @include defineColor(--color-fg-strong, $white);
  @include defineColor(--color-fg-normal, darken($white, 15%));
  @include defineColor(--color-fg-light, darken($white, 30%));
  @include defineColor(--color-bg-normal, $black);
  @include defineColor(--color-bg-less, lighten($black, 12%));
  @include defineColor(--color-bg-least, lighten($black, 25%));
}

/** Bulma color overrides. */
$custom-colors: (
    "twitter": ($twitter, $twitter-invert)
);
$scheme-main: var(--color-bg-normal);
$scheme-invert: var(--color-fg-strong);
$text-strong: var(--color-fg-strong);
$text: var(--color-fg-normal);
$text-light: var(--color-fg-light);
$text-invert: var(--color-bg-normal);


@import "~bulma";
@import "~buefy/src/scss/buefy";
